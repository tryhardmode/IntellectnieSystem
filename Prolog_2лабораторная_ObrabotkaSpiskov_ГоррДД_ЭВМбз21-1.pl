% Создание предикатов для обработки списков 
%===============1. Принадлежит ли элемент списку =======================
% belongs(3, [1, 2, 3, 4, 5]).
belongs(X, [X|_]).      % X — первый элемент в голове списка
belongs(X, [_|Tail]) :- % проверка, если элемент в хвосте списка
    belongs(X, Tail).

%===============2. Количество элементов в списке =======================
list_length([], 0). % Пустой список имеет длину 0

% list_length([1, 2, 3, 4, 5], Length).
list_length([_|Tail], Length) :-
    list_length(Tail, TailLength),
    Length is TailLength + 1. % Длина списка = 1 + длина хвоста

%===============3. Максимальный и минимальный элемент списка =======================
list_max([X], X). % Максимум в списке из одного элемента — сам элемент

% list_max([1, 5, 3, 9, 2], Max).
list_max([Head|Tail], Max) :- % Сравниваем голову со значением максимума в хвосте
    list_max(Tail, TailMax), % Находим максимум в хвосте
    Max is max(Head, TailMax). % Выбираем большее из головы и хвоста

list_min([X], X). % Минимум в списке из одного элемента — сам элемент

% list_min([3, 5, 1, 9, 2], Min).
list_min([Head|Tail], Min) :- % Сравниваем голову со значением минимума в хвосте
    list_min(Tail, TailMin), % Находим минимум в хвосте
    Min is min(Head, TailMin). % Выбираем меньшее из головы и хвоста